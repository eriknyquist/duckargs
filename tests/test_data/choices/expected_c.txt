// Generated by duckargs, invoked with the following arguments:
// pos1 pos2 -f -g -q --qefqaf op,ep,orp

#include <stdbool.h>
#include <getopt.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

static char *pos1 = "pos1";
static char *pos2 = "pos2";
static bool f = false;
static bool g = false;
static char *qefqaf_choices[] = {"op", "ep", "orp"};
static char *qefqaf = "op";

static struct option long_options[] =
{
    {"qefqaf", required_argument, NULL, 'q'},
    {NULL, 0, NULL, 0}
};

void print_usage(void)
{
    printf("\n");
    printf("USAGE:\n\n");
    printf("program_name [OPTIONS] pos1 pos2\n");
    printf("\nOPTIONS:\n\n");
    printf("-f                       A flag\n");
    printf("-g                       A flag\n");
    printf("-q --qefqaf [op|ep|orp]  A string value (default: %s)\n", qefqaf ? qefqaf : "null");
    printf("\n");
}

int parse_args(int argc, char *argv[])
{
    int ch;

    while ((ch = getopt_long(argc, argv, "fgq:", long_options, NULL)) != -1)
    {
        switch (ch)
        {
            case 'f':
            {
                f = true;
                break;
            }
            case 'g':
            {
                g = true;
                break;
            }
            case 'q':
            {
                qefqaf = optarg;
                for (int i = 0; i < 3; i++)
                {
                    if (0 == strcmp(qefqaf_choices[i], qefqaf))
                    {
                        break;
                    }
                    if (i == 2)
                    {
                        printf("Option '-q' must be one of ['op', 'ep', 'orp']\n");
                        return -1;
                    }
                }
                break;
            }
        }
    }

    if (argc < (optind + 2))
    {
        printf("Missing positional arguments\n");
        return -1;
    }

    pos1 = argv[optind];
    optind++;

    pos2 = argv[optind];
    optind++;

    return 0;
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        print_usage();
        return -1;
    }

    int ret = parse_args(argc, argv);
    if (0 != ret)
    {
        return ret;
    }

    printf("pos1: %s\n", pos1 ? pos1 : "null");
    printf("pos2: %s\n", pos2 ? pos2 : "null");
    printf("f: %s\n", f ? "true" : "false");
    printf("g: %s\n", g ? "true" : "false");
    printf("qefqaf: %s\n", qefqaf ? qefqaf : "null");

    return 0;
}

