// Generated by duckargs, invoked with the following arguments:
// -a --test_1 5464 -b --test__-2 8 -j --j==j -g --lp++l pos-1 pos_2 pos_-_3

#include <stdbool.h>
#include <getopt.h>
#include <stdlib.h>
#include <stdio.h>

static long int test_1 = 5464;
static long int test___2 = 8;
static bool j__j = false;
static char *lp__l = "pos-1";
static char *pos_2 = "pos_2";
static char *pos___3 = "pos___3";

static struct option long_options[] =
{
    {"test_1", required_argument, NULL, 'a'},
    {"test__-2", required_argument, NULL, 'b'},
    {"j--j", no_argument, NULL, 'j'},
    {"lp--l", required_argument, NULL, 'g'},
    {NULL, 0, NULL, 0}
};

void print_usage(void)
{
    printf("\n");
    printf("USAGE:\n\n");
    printf("program_name [OPTIONS] pos_2 pos___3\n");
    printf("\nOPTIONS:\n\n");
    printf("-a --test_1 [int]    An int value (default: %ld)\n", test_1);
    printf("-b --test__-2 [int]  An int value (default: %ld)\n", test___2);
    printf("-j --j--j            A flag\n");
    printf("-g --lp--l [string]  A string value (default: %s)\n", lp__l ? lp__l : "null");
    printf("\n");
}

int parse_args(int argc, char *argv[])
{
    char *endptr = NULL;
    int ch;

    while ((ch = getopt_long(argc, argv, "a:b:jg:", long_options, NULL)) != -1)
    {
        switch (ch)
        {
            case 'a':
            {
                test_1 = strtol(optarg, &endptr, 0);
                if (endptr && (*endptr != '\0'))
                {
                    printf("Option '-a' requires an integer argument\n");
                    return -1;
                }
                break;
            }
            case 'b':
            {
                test___2 = strtol(optarg, &endptr, 0);
                if (endptr && (*endptr != '\0'))
                {
                    printf("Option '-b' requires an integer argument\n");
                    return -1;
                }
                break;
            }
            case 'j':
            {
                j__j = true;
                break;
            }
            case 'g':
            {
                lp__l = optarg;
                break;
            }
        }
    }

    if (argc < (optind + 2))
    {
        printf("Missing positional arguments\n");
        return -1;
    }

    pos_2 = argv[optind];
    optind++;

    pos___3 = argv[optind];

    return 0;
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        print_usage();
        return -1;
    }

    int ret = parse_args(argc, argv);
    if (0 != ret)
    {
        return ret;
    }

    printf("test_1: %ld\n", test_1);
    printf("test___2: %ld\n", test___2);
    printf("j__j: %s\n", j__j ? "true" : "false");
    printf("lp__l: %s\n", lp__l ? lp__l : "null");
    printf("pos_2: %s\n", pos_2 ? pos_2 : "null");
    printf("pos___3: %s\n", pos___3 ? pos___3 : "null");

    return 0;
}

