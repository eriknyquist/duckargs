// Generated by duckargs, invoked with the following arguments:
// -0x44 -f --fell -0x235 -x -0x8

#include <getopt.h>
#include <stdlib.h>
#include <stdio.h>

static long int positional_arg0 = -0x44;
static long int fell = -0x235;
static long int x = -0x8;

static struct option long_options[] =
{
    {"fell", required_argument, NULL, 'f'},
    {NULL, 0, NULL, 0}
};

void print_usage(void)
{
    printf("\n");
    printf("USAGE:\n\n");
    printf("program_name [OPTIONS] positional_arg0\n");
    printf("\nOPTIONS:\n\n");
    printf("-f --fell [int]  An int value (default: %ld)\n", fell);
    printf("-x [int]         An int value (default: %ld)\n", x);
    printf("\n");
}

int parse_args(int argc, char *argv[])
{
    char *endptr = NULL;
    int ch;

    while ((ch = getopt_long(argc, argv, "f:x:", long_options, NULL)) != -1)
    {
        switch (ch)
        {
            case 'f':
            {
                fell = strtol(optarg, &endptr, 0);
                if (endptr && (*endptr != '\0'))
                {
                    printf("Option '-f' requires an integer argument\n");
                    return -1;
                }
                break;
            }
            case 'x':
            {
                x = strtol(optarg, &endptr, 0);
                if (endptr && (*endptr != '\0'))
                {
                    printf("Option '-x' requires an integer argument\n");
                    return -1;
                }
                break;
            }
        }
    }

    if (argc < (optind + 1))
    {
        printf("Missing positional arguments\n");
        return -1;
    }

    positional_arg0 = strtol(argv[optind], &endptr, 0);
    if (endptr && (*endptr != '\0'))
    {
        printf("Positional argument #1 (positional_arg0) requires an integer argument\n");
        return -1;
    }
    optind++;

    return 0;
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        print_usage();
        return -1;
    }

    int ret = parse_args(argc, argv);
    if (0 != ret)
    {
        return ret;
    }

    printf("positional_arg0: %ld\n", positional_arg0);
    printf("fell: %ld\n", fell);
    printf("x: %ld\n", x);

    return 0;
}

