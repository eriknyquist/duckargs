// Generated by duckargs, invoked with the following arguments:
// pos1 pos2 pos3 pos4 pos5 pos6 pos7 pos8 pos9 pos10 -a --aye 5 -w --yyy -k 0.0 -l jkjkj -o --out -d --ede -v --vvv jfijfdsifj -s --ssss -z --zzzz -c --ccc jiji -b --bbb 8 -i --ii d -q --qqqqsdgvs -y -r

#include <stdbool.h>
#include <getopt.h>
#include <stdlib.h>
#include <stdio.h>

static char *pos1 = "pos1";
static char *pos2 = "pos2";
static char *pos3 = "pos3";
static char *pos4 = "pos4";
static char *pos5 = "pos5";
static char *pos6 = "pos6";
static char *pos7 = "pos7";
static char *pos8 = "pos8";
static char *pos9 = "pos9";
static char *pos10 = "pos10";
static long int aye = 5;
static bool yyy = false;
static float k = 0.0;
static char *l = "jkjkj";
static bool out = false;
static bool ede = false;
static char *vvv = "jfijfdsifj";
static bool ssss = false;
static bool zzzz = false;
static char *ccc = "jiji";
static long int bbb = 8;
static char *ii = "d";
static bool qqqqsdgvs = false;
static bool y = false;
static bool r = false;

static struct option long_options[] =
{
    {"aye", required_argument, NULL, 'a'},
    {"yyy", no_argument, NULL, 'w'},
    {"out", no_argument, NULL, 'o'},
    {"ede", no_argument, NULL, 'd'},
    {"vvv", required_argument, NULL, 'v'},
    {"ssss", no_argument, NULL, 's'},
    {"zzzz", no_argument, NULL, 'z'},
    {"ccc", required_argument, NULL, 'c'},
    {"bbb", required_argument, NULL, 'b'},
    {"ii", required_argument, NULL, 'i'},
    {"qqqqsdgvs", no_argument, NULL, 'q'},
    {NULL, 0, NULL, 0}
};

void print_usage(void)
{
    printf("\n");
    printf("program_name [OPTIONS] pos1 pos2 pos3 pos4 pos5 pos6 pos7 pos8 pos9 pos10\n\n");
    printf("-a --aye [int]     An int value (default: %ld)\n", aye);
    printf("-w --yyy           A flag\n");
    printf("-k [float]         A float value (default: %.2f)\n", k);
    printf("-l [string]        A string value (default: %s)\n", l ? l : "null");
    printf("-o --out           A flag\n");
    printf("-d --ede           A flag\n");
    printf("-v --vvv [string]  A string value (default: %s)\n", vvv ? vvv : "null");
    printf("-s --ssss          A flag\n");
    printf("-z --zzzz          A flag\n");
    printf("-c --ccc [string]  A string value (default: %s)\n", ccc ? ccc : "null");
    printf("-b --bbb [int]     An int value (default: %ld)\n", bbb);
    printf("-i --ii [string]   A string value (default: %s)\n", ii ? ii : "null");
    printf("-q --qqqqsdgvs     A flag\n");
    printf("-y                 A flag\n");
    printf("-r                 A flag\n");
    printf("\n");
}

int parse_args(int argc, char *argv[])
{
    char *endptr = NULL;
    int ch;

    while ((ch = getopt_long(argc, argv, "a:wk:l:odv:szc:b:i:qyr", long_options, NULL)) != -1)
    {
        switch (ch)
        {
            case 'a':
            {
                aye = strtol(optarg, &endptr, 0);
                if (endptr && (*endptr != '\0'))
                {
                    printf("Option '-a' requires an integer argument\n");
                    return -1;
                }
                break;
            }
            case 'w':
            {
                yyy = true;
                break;
            }
            case 'k':
            {
                k = strtof(optarg, &endptr);
                if (endptr == optarg)
                {
                    printf("Option '-k' requires a floating-point argument\n");
                    return -1;
                }
                break;
            }
            case 'l':
            {
                l = optarg;
                break;
            }
            case 'o':
            {
                out = true;
                break;
            }
            case 'd':
            {
                ede = true;
                break;
            }
            case 'v':
            {
                vvv = optarg;
                break;
            }
            case 's':
            {
                ssss = true;
                break;
            }
            case 'z':
            {
                zzzz = true;
                break;
            }
            case 'c':
            {
                ccc = optarg;
                break;
            }
            case 'b':
            {
                bbb = strtol(optarg, &endptr, 0);
                if (endptr && (*endptr != '\0'))
                {
                    printf("Option '-b' requires an integer argument\n");
                    return -1;
                }
                break;
            }
            case 'i':
            {
                ii = optarg;
                break;
            }
            case 'q':
            {
                qqqqsdgvs = true;
                break;
            }
            case 'y':
            {
                y = true;
                break;
            }
            case 'r':
            {
                r = true;
                break;
            }
        }
    }

    if (argc < (optind + 10))
    {
        printf("Missing positional arguments\n");
        return -1;
    }

    pos1 = argv[optind];
    optind++;

    pos2 = argv[optind];
    optind++;

    pos3 = argv[optind];
    optind++;

    pos4 = argv[optind];
    optind++;

    pos5 = argv[optind];
    optind++;

    pos6 = argv[optind];
    optind++;

    pos7 = argv[optind];
    optind++;

    pos8 = argv[optind];
    optind++;

    pos9 = argv[optind];
    optind++;

    pos10 = argv[optind];
    optind++;

    return 0;
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        print_usage();
        return -1;
    }

    int ret = parse_args(argc, argv);
    if (0 != ret)
    {
        return ret;
    }

    printf("pos1: %s\n", pos1);
    printf("pos2: %s\n", pos2);
    printf("pos3: %s\n", pos3);
    printf("pos4: %s\n", pos4);
    printf("pos5: %s\n", pos5);
    printf("pos6: %s\n", pos6);
    printf("pos7: %s\n", pos7);
    printf("pos8: %s\n", pos8);
    printf("pos9: %s\n", pos9);
    printf("pos10: %s\n", pos10);
    printf("aye: %ld\n", aye);
    printf("yyy: %s\n", yyy ? "true" : "false");
    printf("k: %.4f\n", k);
    printf("l: %s\n", l);
    printf("out: %s\n", out ? "true" : "false");
    printf("ede: %s\n", ede ? "true" : "false");
    printf("vvv: %s\n", vvv);
    printf("ssss: %s\n", ssss ? "true" : "false");
    printf("zzzz: %s\n", zzzz ? "true" : "false");
    printf("ccc: %s\n", ccc);
    printf("bbb: %ld\n", bbb);
    printf("ii: %s\n", ii);
    printf("qqqqsdgvs: %s\n", qqqqsdgvs ? "true" : "false");
    printf("y: %s\n", y ? "true" : "false");
    printf("r: %s\n", r ? "true" : "false");

    return 0;
}

