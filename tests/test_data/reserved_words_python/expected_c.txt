// Generated by duckargs, invoked with the following arguments:
// -i --int 5 -f --float 6.6 -d --dict -t --tuple -r --return -l --lambda -n --nonlocal -q --from -c --continue -y --yield -g --global -u --del -b --class

#include <stdbool.h>
#include <getopt.h>
#include <stdlib.h>
#include <stdio.h>

static long int intval = 5;
static float floatval = 6.6;
static bool dict = false;
static bool tuple = false;
static bool returnval = false;
static bool lambda = false;
static bool nonlocal = false;
static bool from = false;
static bool continueval = false;
static bool yield = false;
static bool global = false;
static bool del = false;
static bool class = false;

static struct option long_options[] =
{
    {"int", required_argument, NULL, 'i'},
    {"float", required_argument, NULL, 'f'},
    {"dict", no_argument, NULL, 'd'},
    {"tuple", no_argument, NULL, 't'},
    {"return", no_argument, NULL, 'r'},
    {"lambda", no_argument, NULL, 'l'},
    {"nonlocal", no_argument, NULL, 'n'},
    {"from", no_argument, NULL, 'q'},
    {"continue", no_argument, NULL, 'c'},
    {"yield", no_argument, NULL, 'y'},
    {"global", no_argument, NULL, 'g'},
    {"del", no_argument, NULL, 'u'},
    {"class", no_argument, NULL, 'b'},
    {NULL, 0, NULL, 0}
};

void print_usage(void)
{
    printf("\n");
    printf("USAGE:\n\n");
    printf("program_name [OPTIONS]\n");
    printf("\nOPTIONS:\n\n");
    printf("-i --int [int]      An int value (default: %ld)\n", intval);
    printf("-f --float [float]  A float value (default: %.2f)\n", floatval);
    printf("-d --dict           dict flag\n");
    printf("-t --tuple          tuple flag\n");
    printf("-r --return         return flag\n");
    printf("-l --lambda         lambda flag\n");
    printf("-n --nonlocal       nonlocal flag\n");
    printf("-q --from           from flag\n");
    printf("-c --continue       continue flag\n");
    printf("-y --yield          yield flag\n");
    printf("-g --global         global flag\n");
    printf("-u --del            del flag\n");
    printf("-b --class          class flag\n");
    printf("\n");
}

int parse_args(int argc, char *argv[])
{
    char *endptr = NULL;
    int ch;

    while ((ch = getopt_long(argc, argv, "i:f:dtrlnqcygub", long_options, NULL)) != -1)
    {
        switch (ch)
        {
            case 'i':
            {
                intval = strtol(optarg, &endptr, 0);
                if (endptr && (*endptr != '\0'))
                {
                    printf("Option '-i' requires an integer argument\n");
                    return -1;
                }
                break;
            }
            case 'f':
            {
                floatval = strtof(optarg, &endptr);
                if (endptr == optarg)
                {
                    printf("Option '-f' requires a floating-point argument\n");
                    return -1;
                }
                break;
            }
            case 'd':
            {
                dict = true;
                break;
            }
            case 't':
            {
                tuple = true;
                break;
            }
            case 'r':
            {
                returnval = true;
                break;
            }
            case 'l':
            {
                lambda = true;
                break;
            }
            case 'n':
            {
                nonlocal = true;
                break;
            }
            case 'q':
            {
                from = true;
                break;
            }
            case 'c':
            {
                continueval = true;
                break;
            }
            case 'y':
            {
                yield = true;
                break;
            }
            case 'g':
            {
                global = true;
                break;
            }
            case 'u':
            {
                del = true;
                break;
            }
            case 'b':
            {
                class = true;
                break;
            }
        }
    }

    return 0;
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        print_usage();
        return -1;
    }

    int ret = parse_args(argc, argv);
    if (0 != ret)
    {
        return ret;
    }

    printf("int: %ld\n", intval);
    printf("float: %.4f\n", floatval);
    printf("dict: %s\n", dict ? "true" : "false");
    printf("tuple: %s\n", tuple ? "true" : "false");
    printf("return: %s\n", returnval ? "true" : "false");
    printf("lambda: %s\n", lambda ? "true" : "false");
    printf("nonlocal: %s\n", nonlocal ? "true" : "false");
    printf("from: %s\n", from ? "true" : "false");
    printf("continue: %s\n", continueval ? "true" : "false");
    printf("yield: %s\n", yield ? "true" : "false");
    printf("global: %s\n", global ? "true" : "false");
    printf("del: %s\n", del ? "true" : "false");
    printf("class: %s\n", class ? "true" : "false");

    return 0;
}

