// Generated by duckargs, invoked with the following arguments:
// -a 4 -b --bbb 5.5 -t --tttt test -j srgsrh -k wergwshg

#include <getopt.h>
#include <stdlib.h>
#include <stdio.h>

static long int a = 4;
static float bbb = 5.5;
static char *tttt = "test";
static char *j = "srgsrh";
static char *k = "wergwshg";

static struct option long_options[] =
{
    {"bbb", required_argument, NULL, 'b'},
    {"tttt", required_argument, NULL, 't'},
    {NULL, 0, NULL, 0}
};

void print_usage(void)
{
    printf("\n");
    printf("program_name [OPTIONS]\n\n");
    printf("-a [int]            An int value (default: %ld)\n", a);
    printf("-b --bbb [float]    A float value (default: %.2f)\n", bbb);
    printf("-t --tttt [string]  A string value (default: %s)\n", tttt ? tttt : "null");
    printf("-j [string]         A string value (default: %s)\n", j ? j : "null");
    printf("-k [string]         A string value (default: %s)\n", k ? k : "null");
    printf("\n");
}

int parse_args(int argc, char *argv[])
{
    char *endptr = NULL;
    int ch;

    while ((ch = getopt_long(argc, argv, "a:b:t:j:k:", long_options, NULL)) != -1)
    {
        switch (ch)
        {
            case 'a':
            {
                a = strtol(optarg, &endptr, 0);
                if (endptr && (*endptr != '\0'))
                {
                    printf("Option '-a' requires an integer argument\n");
                    return -1;
                }
                break;
            }
            case 'b':
            {
                bbb = strtof(optarg, &endptr);
                if (endptr == optarg)
                {
                    printf("Option '-b' requires a floating-point argument\n");
                    return -1;
                }
                break;
            }
            case 't':
            {
                tttt = optarg;
                break;
            }
            case 'j':
            {
                j = optarg;
                break;
            }
            case 'k':
            {
                k = optarg;
                break;
            }
        }
    }

    return 0;
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        print_usage();
        return -1;
    }

    int ret = parse_args(argc, argv);
    if (0 != ret)
    {
        return ret;
    }

    printf("a: %ld\n", a);
    printf("bbb: %.4f\n", bbb);
    printf("tttt: %s\n", tttt);
    printf("j: %s\n", j);
    printf("k: %s\n", k);

    return 0;
}

