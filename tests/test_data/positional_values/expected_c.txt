// Generated by duckargs, invoked with the following arguments:
// 0x 0x123 2.3 hello -r --ra FILE

#include <getopt.h>
#include <stdlib.h>
#include <stdio.h>

static char *positional_arg0 = "0x";
static long int positional_arg1 = 0x123;
static float positional_arg2 = 2.3;
static char *hello = "hello";
static char *ra = NULL;

static struct option long_options[] =
{
    {"ra", required_argument, NULL, 'r'},
    {NULL, 0, NULL, 0}
};

void print_usage(void)
{
    printf("\n");
    printf("USAGE:\n\n");
    printf("program_name [OPTIONS] positional_arg0 positional_arg1 positional_arg2 hello\n");
    printf("\nOPTIONS:\n\n");
    printf("-r --ra FILE  A filename (default: %s)\n", ra ? ra : "null");
    printf("\n");
}

int parse_args(int argc, char *argv[])
{
    char *endptr = NULL;
    int ch;

    while ((ch = getopt_long(argc, argv, "r:", long_options, NULL)) != -1)
    {
        switch (ch)
        {
            case 'r':
            {
                ra = optarg;
                break;
            }
        }
    }

    if (argc < (optind + 4))
    {
        printf("Missing positional arguments\n");
        return -1;
    }

    positional_arg0 = argv[optind];
    optind++;

    positional_arg1 = strtol(argv[optind], &endptr, 0);
    if (endptr && (*endptr != '\0'))
    {
        printf("Positional argument #2 (positional_arg1) requires an integer argument\n");
        return -1;
    }
    optind++;

    positional_arg2 = strtof(argv[optind], &endptr);
    if (endptr == argv[optind])
    {
        printf("Positional argument #3 (positional_arg2) requires a floating-point argument\n");
        return -1;
    }
    optind++;

    hello = argv[optind];
    optind++;

    return 0;
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        print_usage();
        return -1;
    }

    int ret = parse_args(argc, argv);
    if (0 != ret)
    {
        return ret;
    }

    printf("positional_arg0: %s\n", positional_arg0);
    printf("positional_arg1: %ld\n", positional_arg1);
    printf("positional_arg2: %.4f\n", positional_arg2);
    printf("hello: %s\n", hello);
    printf("ra: %s\n", ra);

    return 0;
}

