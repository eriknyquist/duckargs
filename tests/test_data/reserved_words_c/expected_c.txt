// Generated by duckargs, invoked with the following arguments:
// -i --int 55 -f --float 4.4 -s --struct -v --void -q --for -b --break -r --return -a --auto -p --static -w --while -o --switch -t --typedef -k --double -x --signed -e --const

#include <stdbool.h>
#include <getopt.h>
#include <stdlib.h>
#include <stdio.h>

static long int intval = 55;
static float floatval = 4.4;
static bool structval = false;
static bool voidval = false;
static bool forval = false;
static bool breakval = false;
static bool returnval = false;
static bool autoval = false;
static bool staticval = false;
static bool whileval = false;
static bool switchval = false;
static bool typedefval = false;
static bool doubleval = false;
static bool signedval = false;
static bool constval = false;

static struct option long_options[] =
{
    {"int", required_argument, NULL, 'i'},
    {"float", required_argument, NULL, 'f'},
    {"struct", no_argument, NULL, 's'},
    {"void", no_argument, NULL, 'v'},
    {"for", no_argument, NULL, 'q'},
    {"break", no_argument, NULL, 'b'},
    {"return", no_argument, NULL, 'r'},
    {"auto", no_argument, NULL, 'a'},
    {"static", no_argument, NULL, 'p'},
    {"while", no_argument, NULL, 'w'},
    {"switch", no_argument, NULL, 'o'},
    {"typedef", no_argument, NULL, 't'},
    {"double", no_argument, NULL, 'k'},
    {"signed", no_argument, NULL, 'x'},
    {"const", no_argument, NULL, 'e'},
    {NULL, 0, NULL, 0}
};

void print_usage(void)
{
    printf("\n");
    printf("USAGE:\n\n");
    printf("program_name [OPTIONS]\n");
    printf("\nOPTIONS:\n\n");
    printf("-i --int [int]      An int value (default: %ld)\n", intval);
    printf("-f --float [float]  A float value (default: %.2f)\n", floatval);
    printf("-s --struct         struct flag\n");
    printf("-v --void           void flag\n");
    printf("-q --for            for flag\n");
    printf("-b --break          break flag\n");
    printf("-r --return         return flag\n");
    printf("-a --auto           auto flag\n");
    printf("-p --static         static flag\n");
    printf("-w --while          while flag\n");
    printf("-o --switch         switch flag\n");
    printf("-t --typedef        typedef flag\n");
    printf("-k --double         double flag\n");
    printf("-x --signed         signed flag\n");
    printf("-e --const          const flag\n");
    printf("\n");
}

int parse_args(int argc, char *argv[])
{
    char *endptr = NULL;
    int ch;

    while ((ch = getopt_long(argc, argv, "i:f:svqbrapwotkxe", long_options, NULL)) != -1)
    {
        switch (ch)
        {
            case 'i':
            {
                intval = strtol(optarg, &endptr, 0);
                if (endptr && (*endptr != '\0'))
                {
                    printf("Option '-i' requires an integer argument\n");
                    return -1;
                }
                break;
            }
            case 'f':
            {
                floatval = strtof(optarg, &endptr);
                if (endptr == optarg)
                {
                    printf("Option '-f' requires a floating-point argument\n");
                    return -1;
                }
                break;
            }
            case 's':
            {
                structval = true;
                break;
            }
            case 'v':
            {
                voidval = true;
                break;
            }
            case 'q':
            {
                forval = true;
                break;
            }
            case 'b':
            {
                breakval = true;
                break;
            }
            case 'r':
            {
                returnval = true;
                break;
            }
            case 'a':
            {
                autoval = true;
                break;
            }
            case 'p':
            {
                staticval = true;
                break;
            }
            case 'w':
            {
                whileval = true;
                break;
            }
            case 'o':
            {
                switchval = true;
                break;
            }
            case 't':
            {
                typedefval = true;
                break;
            }
            case 'k':
            {
                doubleval = true;
                break;
            }
            case 'x':
            {
                signedval = true;
                break;
            }
            case 'e':
            {
                constval = true;
                break;
            }
        }
    }

    return 0;
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        print_usage();
        return -1;
    }

    int ret = parse_args(argc, argv);
    if (0 != ret)
    {
        return ret;
    }

    printf("int: %ld\n", intval);
    printf("float: %.4f\n", floatval);
    printf("struct: %s\n", structval ? "true" : "false");
    printf("void: %s\n", voidval ? "true" : "false");
    printf("for: %s\n", forval ? "true" : "false");
    printf("break: %s\n", breakval ? "true" : "false");
    printf("return: %s\n", returnval ? "true" : "false");
    printf("auto: %s\n", autoval ? "true" : "false");
    printf("static: %s\n", staticval ? "true" : "false");
    printf("while: %s\n", whileval ? "true" : "false");
    printf("switch: %s\n", switchval ? "true" : "false");
    printf("typedef: %s\n", typedefval ? "true" : "false");
    printf("double: %s\n", doubleval ? "true" : "false");
    printf("signed: %s\n", signedval ? "true" : "false");
    printf("const: %s\n", constval ? "true" : "false");

    return 0;
}

